<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper 
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="boardMapper">
	<sql id="boardListSql">
		SELECT B.NO, 
			   B.TITLE, 
			   M.ID, 
			   B.ORIGINAL_FILENAME, 
			   B.RENAMED_FILENAME,
			   B.READCOUNT, 
			   B.CREATE_DATE 
		FROM BOARD B 
		JOIN MEMBER M ON(B.WRITER_NO = M.NO) 
		WHERE B.STATUS = 'Y'
	</sql>

	<resultMap id="boardListResultMap" type="Board">
		<id property="no" column="NO" /> <!-- PK에 해당하는 값을 매핑해주는 요소 -->
		<result property="title" column="TITLE"/>
		<result property="writerId" column="ID"/>
		<result property="originalFileName" column="ORIGINAL_FILENAME"/>
		<result property="renamedFileName" column="RENAMED_FILENAME"/>
		<result property="readCount" column="READCOUNT"/>
		<result property="createDate" column="CREATE_DATE"/>
	</resultMap>
	
	<!-- extends 속성은 다른 resultMap을 상속하는 속성이다.
	
		 collection 태그는 컬렉션에 해당하는 필드에 조회 결과를 매핑할 때 사용한다.
		 	- javaType 속성은 컬렉션 필드의 자바 타입을 지정한다.
		 	- select 속성은 조회하고자 하는 select 쿼리문의 id를 입력한다.
		 	- column 속성은 조회하고자 하는  쿼리문에 파라미터를 전달할 때 사용한다.
		 	
		 * 1:1 관계인 객체를 조회하고 싶다면 association 요소를 사용해서 매핑해주면 된다. (사용방법 collection과 동일)
		   (collection : 조회 결과가 여러개일때 사용 / association : 조회 결과가 한개일때 사용)
	 -->
	<resultMap id="boardDetailResultMap" type="Board" extends="boardListResultMap">
		<result property="content" column="CONTENT"/>
		<result property="type" column="TYPE"/>
		<result property="modifyDate" column="MODIFY_DATE"/>
		<collection property="replies" javaType="arraylist" select="selectRepliesByNo" column="NO"/>
		<!-- replies에 selct 조회 결과를 매핑한다. -->
		<!-- javaType="arraylist" : 내장별칭 -->
		<!-- column="NO" : 파라미터는(#{no}) 컬럼 속성으로 지정해주면 쿼리문의 조회된 결과를 파라미터 값에 넘겨준다. -->
	</resultMap>
	
	<resultMap id="replyResultMap" type="Reply">
		<id property="no" column="NO"/>
		<result property="boardNo" column="BOARD_NO"/>
		<result property="content" column="CONTENT"/>
		<result property="writerId" column="ID"/>
		<result property="createDate" column="CREATE_DATE"/>
		<result property="modifyDate" column="MODIFY_DATE"/>
	</resultMap>

	<!-- 게시글 목록 조회 -->
	<select id="selectBoardCount" resultType="_int">
		SELECT COUNT(*) FROM BOARD WHERE STATUS='Y'
	</select>

	<select id="selectAll" resultMap="boardListResultMap">
		<include refid="boardListSql"/>
		ORDER BY B.NO DESC
	</select>
	
	<!-- 게시글 목록 조회 (검색 기능 적용) -->
	<!-- 아이디 값을 가져오기 위해 테이블 JOIN -->
	<select id="selectBoardCountByKeyWord" resultType="_int">
		<!-- 전체 게시글의 개수 쿼리문 -->
		SELECT COUNT(*) 
		FROM BOARD B
		JOIN MEMBER M ON (B.WRITER_NO = M.NO)
		WHERE B.STATUS='Y'
		<if test="writer != null">
			AND M.ID LIKE '%' || #{writer} || '%'
		</if>
		<if test="title != null">
			AND B.TITLE LIKE '%' || #{title} || '%'
		</if>
		<if test="content != null">
			AND B.CONTENT LIKE '%' || #{content} || '%'
		</if>
	</select>
	
	<select id="selectAllByKeyWord" resultMap="boardListResultMap">
		<!-- 
			1. 다중 <if> 요소를 활용한 검색 기능 구현 
		<include refid="boardListSql"/>
		-->
		<!-- 동적 쿼리를 만들기 위한 요소 (조건을 충족하면 추가)
		<if test="writer != null">
			AND M.ID LIKE '%' || #{writer} || '%'
		</if>
		<if test="title != null">
			AND B.TITLE LIKE '%' || #{title} || '%'
		</if>
		<if test="content != null">
			AND B.CONTENT LIKE '%' || #{content} || '%'
		</if>
		ORDER BY B.NO DESC
		-->
		
		<!-- 
			2. <choose>, <when>, <otherwise>를 활용한 검색 기능 구현
			선택적으로 하기 때문에 현재 쿼리문에서는 choose를 사용하는 게 좋다!
		<include refid="boardListSql"/>
		<choose>
			<when test="writer != null">
				AND M.ID LIKE '%' || #{writer} || '%'
			</when>
			<when test="title != null">
				AND B.TITLE LIKE '%' || #{title} || '%'
			</when>
			<when test="content != null">
				AND B.CONTENT LIKE '%' || #{content} || '%'
			</when>
			<otherwise>
				위의 조건 중 하나라도 만족하지 않는 경우 포함될 쿼리문 작성
			</otherwise>
		</choose>
		ORDER BY B.NO DESC
		-->
		
		<!-- 
			3. <where>와 다중 <if>를 활용한 검색 기능 구현
			조건을 모두 만족하지 않을 경우 AND를 제거하고 B.STATUS = 'Y'만 포함
			where절에 AND가 있으면 신텍스 에러, 자동으로 AND를 지워준다.
		SELECT B.NO, 
			   B.TITLE, 
			   M.ID, 
			   B.ORIGINAL_FILENAME, 
			   B.RENAMED_FILENAME,
			   B.READCOUNT, 
			   B.CREATE_DATE 
		FROM BOARD B 
		JOIN MEMBER M ON(B.WRITER_NO = M.NO)
		<where>
			<if test="writer != null">
				M.ID LIKE '%' || #{writer} || '%'
			</if>
			<if test="title != null">
				AND B.TITLE LIKE '%' || #{title} || '%'
			</if>
			<if test="content != null">
				AND B.CONTENT LIKE '%' || #{content} || '%'
			</if>
			AND B.STATUS = 'Y'
		</where>
		ORDER BY B.NO DESC
		-->
		
		<!-- 
			4. <trim>과 다중 <if>를 활용한 검색 기능 구현
		-->
		SELECT B.NO, 
			   B.TITLE, 
			   M.ID, 
			   B.ORIGINAL_FILENAME, 
			   B.RENAMED_FILENAME,
			   B.READCOUNT, 
			   B.CREATE_DATE 
		FROM BOARD B 
		JOIN MEMBER M ON(B.WRITER_NO = M.NO)
		<trim prefix="WHERE" prefixOverrides="AND|OR">
			<if test="writer != null">
				M.ID LIKE '%' || #{writer} || '%'
			</if>
			<if test="title != null">
				AND B.TITLE LIKE '%' || #{title} || '%'
			</if>
			<if test="content != null">
				AND B.CONTENT LIKE '%' || #{content} || '%'
			</if>
			AND B.STATUS = 'Y'
		</trim>
		ORDER BY B.NO DESC
	</select>
	
	<!-- 게시글 목록 조회 2 (검색 기능 적용) -->
	<select id="selectBoardCountByKeyWord2" resultType="_int">
		SELECT COUNT(*) 
		FROM BOARD B
		JOIN MEMBER M ON (B.WRITER_NO = M.NO)
		WHERE B.STATUS='Y'
		<if test="type != null">
			<choose>
				<when test='type.equals("writer")'>
					AND M.ID LIKE '%' || #{keyWord} || '%'
				</when>
				<when test='type.equals("title")'>
					AND B.TITLE LIKE '%' || #{keyWord} || '%'
				</when>
				<when test='type.equals("content")'>
					AND B.CONTENT LIKE '%' || #{keyWord} || '%'
				</when>
			</choose>
		</if>
	</select>
	
	<select id="selectAllByKeyWord2" resultMap="boardListResultMap">
		<include refid="boardListSql"/>
		<!-- type이 null이 아닐 경우 writer, title, content 중에 선택하기 때문에 choose 사용 -->
		<!-- null일 경우? ORDER BY로 넘어가서 전체 게시글 조회 -->
		<if test="type != null">
			<choose>
				<!-- type이 문자열이기 때문에 equals 메소드를 사용하여 값을 비교 -->
				<!-- keyWord를 사용하여 포함되어 있으면 해당 게시글을 사용 -->
				<when test='type.equals("writer")'>
					AND M.ID LIKE '%' || #{keyWord} || '%'
				</when>
				<when test='type.equals("title")'>
					AND B.TITLE LIKE '%' || #{keyWord} || '%'
				</when>
				<when test='type.equals("content")'>
					AND B.CONTENT LIKE '%' || #{keyWord} || '%'
				</when>
			</choose>
		</if>
		ORDER BY B.NO DESC
	</select>
	
	<!-- 게시글 수 조회 (필터 기능 적용) -->
	<select id="selectBoardCountByFilters" resultType="_int">
		SELECT COUNT(*) 
		FROM BOARD B
		JOIN MEMBER M ON (B.WRITER_NO = M.NO)
		WHERE B.STATUS='Y'
		<if test="array != null">
			AND B.TYPE IN
			<foreach item="filter" collection="array" open="(" separator="," close=")">
				#{filter}
			</foreach>
		</if>
	</select>
	
	<!-- 게시글 목록 조회 (필터 기능 적용) -->
	<!-- parameterType="map" 생략해도 map으로 인식됨 -->
	<select id="selectAllByFilters" parameterType="map" resultMap="boardListResultMap">
		<include refid="boardListSql"/>
		
		<!-- 배열을 넘겨줄 경우 filters 이름으로 접근할 수 없기 때문에 array로 접근해야 한다.-->
		<!-- <if test="array != null"> -->
		
		<!-- 변수명에 상관 없이 list로 넘겨줄 경우 list로 접근해야 한다. -->
		<!-- <if test="list != null"> -->
		
		<!-- filters를 map에 담아주었기 때문에 접근 가능 -->
		<if test="filters != null">
			<!-- 
				AND B.TYPE IN ('B2', 'B3')
			-->
			<!-- 필터를 적용하여 위와 같은 쿼리문을 만들어줌 -->
			AND B.TYPE IN
			<!-- open="(" : 반복을 시작하는 구문 지정
			separator="," : 반복할때마다 반복을 구분할 구분자를 지정 -->
			<foreach item="filter" collection="filters" open="(" separator="," close=")">
				#{filter}
			</foreach>
		</if>
		ORDER BY B.NO DESC
	</select>
	
	<!-- 게시글 상세 조회 (댓글 포함) -->
	<!-- 
		1. 쿼리문을 각각 만들어서 하나의 ResultMap에서 매핑하는 방법
	-->
	<select id="selectBoardByNo" parameterType="_int" resultMap="boardDetailResultMap">
		SELECT B.NO, 
			   B.TITLE, 
			   M.ID, 
			   B.READCOUNT, 
			   B.ORIGINAL_FILENAME, 
			   B.RENAMED_FILENAME, 
			   B.CONTENT, 
			   B.TYPE,
			   B.CREATE_DATE, 
			   B.MODIFY_DATE
		FROM BOARD B
		JOIN MEMBER M ON(B.WRITER_NO = M.NO)
		WHERE B.STATUS = 'Y' AND B.NO=#{no}
		<!-- B.NO=#{no} : 파라미터의 변수명으로 접근 -->
	</select>
	
	<!-- 댓글 목록 조회 -->
	<!-- resultMap에서 쿼리문 실행 -->
	<!-- parameterType="_int" : integer 타입(no) -->
	<!-- <select id="selectRepliesByNo" parameterType="_int" resultType="Reply"> -->
	<select id="selectRepliesByNo" parameterType="_int" resultMap="replyResultMap">
		SELECT R.NO, 
			   R.BOARD_NO, 
			   R.CONTENT, 
			   M.ID, 
			   R.CREATE_DATE, 
			   R.MODIFY_DATE
		FROM REPLY R
		JOIN MEMBER M ON(R.WRITER_NO = M.NO)
		WHERE R.STATUS='Y' AND BOARD_NO=#{no}
		ORDER BY R.NO DESC
	</select>
	
</mapper>